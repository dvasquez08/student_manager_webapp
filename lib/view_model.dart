import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:hooks_riverpod/hooks_riverpod.dart';
import 'package:logger/logger.dart';
import 'package:student_manager/components.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

final viewModel =
    ChangeNotifierProvider.autoDispose<ViewModel>((ref) => ViewModel());

class ViewModel extends ChangeNotifier {
  final _auth = FirebaseAuth.instance;
  CollectionReference studentCollection =
      FirebaseFirestore.instance.collection('students');
  bool isSignedIn = false;
  bool isObscure = true;
  var logger = Logger();

  //Check if signed in

  Future<void> isLoggedIn() async {
    await _auth.authStateChanges().listen((User? user) {
      if (user == null) {
        isSignedIn = false;
      } else
        isSignedIn = true;
    });
    notifyListeners();
  }

  toggleObscure() {
    isObscure = !isObscure;
    notifyListeners();
  }

  Future<void> logout() async {
    await _auth.signOut();
  }

  //This section is what enables the authentication that uses email and password
  //which is configured on Firebase. It tells the app what to do when the credentials
  //match and when they don't match. The error code is generated by the Firebase server

  Future<void> signInWithEmailAndPassword(
      BuildContext context, String email, String password) async {
    await _auth
        .signInWithEmailAndPassword(email: email, password: password)
        .then((value) => logger.d("Login successful"))
        .onError((error, stackTrace) {
      logger.d("Login error $error");
      DialogBox(context, error.toString().replaceAll(RegExp('\\[.*?\\]'), ''));
    });
  }

  void studentStream() async {
    await for (var snapshot
        in FirebaseFirestore.instance.collection("students").snapshots()) {
      notifyListeners();
    }
  }
}
